
@{
    ViewBag.Title = "ORS";
}

<div style="width: 100%;overflow: hidden;"  id="ors_table" data-get="@Url.RouteUrl("get_ors_ps")" data-save="@Url.RouteUrl("save_ors_ps")" data-delete="@Url.RouteUrl("delete_ors_ps")"  data-allotments="@Url.Action("GetFundSource","ORS",new { ID = ViewBag.allotments })" data-print_ors="@Url.Action("PrintOrs","ORSReports")" data-uacs_amount="@Url.Action("ORS_UACS","ORS")"></div>

@section scripts {
    <script>
        
        (function () {
            var fund_source = [];
            var container = document.getElementById("ors_table");
            var table;
            var valid = true;
            var expense_url = $("#ors_table").data('expense');
            var allotments_url = $("#ors_table").data('allotments');

            //35 cols
            table = new Handsontable(container, {
                startRows: 1,
                startCols: 17,
                rowHeaders: true,
                colWidths: [1, 1, 140, 200, 200, 200, 300, 300, 700, 100, 200, 200, 200, 200, 200, 200, 200],
                colHeaders: true,
                filters: true,
                stretchH: 'all',
                dropdownMenu: true,
                contextMenu: {
                    items: {
                        "make_bold": {
                            name: 'Print ORS',
                            callback: function (key, options) {
                                var selection = this.getSelectedRange();
                                var fromRow = Math.min(selection.from.row, selection.to.row);
                                var tempdata = this.getData();
                                var id = tempdata[fromRow][0];
                                if (id) {
                                    var url = $("#ors_table").data('print_ors') + "/" + id;
                                    window.location.href = url;
                                } else {
                                    Lobibox.alert("warning", //AVAILABLE TYPES: "error", "info", "success", "warning"
                                    {
                                        msg: "This row is not yet saved. Press Ctrl + S to save",
                                        title: "Print ORS"
                                    });
                                }
                            }
                        },
                        "": {
                            name: 'UACS Amount Entry / Disbmt.',
                            callback: function (key, options) {
                                var selection = this.getSelectedRange();
                                var fromRow = Math.min(selection.from.row, selection.to.row);
                                var tempdata = this.getData();
                                var id = tempdata[fromRow][0];
                                if (id) {
                                    var url = $("#ors_table").data('uacs_amount') + "/" + id;
                                    $("#ors_modal").modal({
                                        backdrop: 'static',
                                        keyboard: false,
                                        show: true
                                    });
                                    $(".ors_body").html('');
                                    $(".loading").show();
                                    $.get(url, function (res) {
                                        $(".ors_body").html(res);
                                        $(".loading").hide();
                                    });
                                } else {
                                    Lobibox.alert("warning",
                                    {
                                        msg: "This row is not yet saved. Press Ctrl + S to save",
                                        title: "UACS Amount Entry / Disbmt"
                                    });
                                }
                            }
                        }, "row_below": {}, "remove_row": {},

                    }
                },
                manualColumnMove: true,
                fillHandle: {
                    autoInsertRow: false,
                },
                colHeaders: ['<b>ID</b>', '<b>ROW#</b>', '<b>DATE</b/>', '<b>DV</b>', '<b>PO#</b>', '<b>PR#</b>', '<b>PAYEE</b>', '<b>ADDRESS</b>', '<b>PARTICULARS</b>', '<b>ORS NO</b>', '<b>FUND SOURCE</b>', '<b>GROSS</b>', '<b>CREATED BY</b>', '<b>Date Received</b>', '<b>Time Received</b>', '<b>Date Released</b>', '<b>Time Released</b>', ''],
                columns: [
                    {},
                    {},
                    {
                        type: 'date',
                        dateFormat: 'MM/DD/YYYY',
                        correctFormat: true,
                        defaultDate: Date.now()
                    }, {}, {}, {}, {}, {}, {}, {},
                    {
                        type: 'dropdown',
                        source: fund_source
                    },
                    {},
                    {},
                    {
                        type: 'date',
                        dateFormat: 'MM/DD/YYYY',
                        correctFormat: true,
                        defaultDate: Date.now()
                    },
                    {
                        type: 'time',
                        timeFormat: 'HH:mm:ss',
                        correctFormat: true
                    },
                    {
                        type: 'date',
                        dateFormat: 'MM/DD/YYYY',
                        correctFormat: true,
                        defaultDate: Date.now()
                    },
                    {
                        type: 'time',
                        timeFormat: 'HH:mm:ss',
                        correctFormat: true
                    }, {}
                ],
                cells: function (r, c, prop) {
                    var cellProperties = {};
                    if (c === 0 || c === 1 || c == 9 || c == 11 || c == 12) cellProperties.readOnly = true;
                    return cellProperties;
                },
                beforeRemoveRow: function (index, column) {
                    if (confirm("Are you sure you want to delete this item") == true) {
                        var items = this.getData();
                        var row_item = items[index];
                        var url = $("#ors_table").data('delete');

                        var ps = {
                            "ID": row_item[0]
                        };
                        var data = {
                            data: JSON.stringify(ps)
                        };

                        $.post(url, data, function (resdata) {
                            load_data();
                        });
                        return true;
                    } else {
                        return false;
                    }
                },
                afterValidate: function (isValid, value, row, prop, source) {
                    if (!isValid) {
                        valid = false;
                        alert('there exists an invalid cell, disable save');
                    } else { valid = true; }
                },
            });

            $(document).ready(function () {
                $("#loading").modal('show');
                load_data();
                resize();
                $.get(allotments_url, function (response) {
                    if (response.length > 0) {
                        for (var i = 0; i < response.length; i++) {
                            fund_source[i] = response[i]["Code"];
                        }
                    }
                });
            });

            $(window).bind('keydown', function (event) {
                if (event.ctrlKey && event.keyCode == 82) {
                    var table_data = table.getData();
                    table_data.push(new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null));
                    table.loadData(table_data);
                    event.preventDefault();
                    return;
                }
                else if (event.ctrlKey || event.metaKey) {
                    switch (String.fromCharCode(event.which).toLowerCase()) {
                        case 's':
                            event.preventDefault();
                            document.body.style.cursor = 'wait';
                            if (valid == true) {
                                var url = $("#ors_table").data('save');
                                var orsps = [];
                                var data = table.getData();
                                var ok = false;
                                for (var i = 0; i < data.length; i++) {
                                    if (data[i][10]) {
                                        orsps[i] = {
                                            "ID": data[i][0],
                                            "Row": (i + 1),
                                            "Date": data[i][2],
                                            "DB": data[i][3],
                                            "PO": data[i][4],
                                            "PR": data[i][5],
                                            "PAYEE": data[i][6],
                                            "Adress": data[i][7],
                                            "Particulars": data[i][8],
                                            "FundSource": data[i][10],
                                            "DateReceived": data[i][13],
                                            "TimeReceived": data[i][14],
                                            "DateReleased": data[i][15],
                                            "TimeReleased": data[i][16]
                                        }
                                        ok = true;
                                    } else {
                                        ok = false;
                                    }
                                }
                                if (ok) {
                                    var data = {
                                        data: JSON.stringify(orsps)
                                    };

                                    $.post(url, data, function (resdata) {
                                        load_data();
                                        document.body.style.cursor = 'default';
                                    });
                                } else {
                                    Lobibox.alert("warning", //AVAILABLE TYPES: "error", "info", "success", "warning"
                                    {
                                        msg: "There might be row that has no fund source selected. Please select a fund source for that row.",
                                        title: "Fund Source"
                                    });
                                    document.body.style.cursor = 'default';
                                }
                            } else {
                                Lobibox.alert("warning", //AVAILABLE TYPES: "error", "info", "success", "warning"
                                 {
                                     msg: "Failed to save because theres an ivalid data inputed. See the color red in each rows to indentify errors.",
                                     title: ""
                                 });
                            }

                            break;
                    }
                }
            });
            $("#ors_uacs_close").click(function () {
                load_data();
            });

            function load_data() {
                var url = $("#ors_table").data('get');
                var grand_total = 0;
                var disbursements = 0;
                $.get(url, function (resdata) {
                    var tabledata = [];
                    if (resdata.length > 0) {
                        for (var i = 0; i < resdata.length; i++) {
                            tabledata[i] = new Array(resdata[i]['ID'], resdata[i]['Row'], resdata[i]['Date'], resdata[i]['DB'], resdata[i]['PO'], resdata[i]['PR'], resdata[i]['PAYEE'], resdata[i]['Adress'], resdata[i]['Particulars'], resdata[i]['Row'], resdata[i]['FundSource'], numberWithCommas(resdata[i]['Gross']), resdata[i]['Created_By'], resdata[i]['DateReceived'], resdata[i]['TimeReceived'], resdata[i]['DateReleased'], resdata[i]['TimeReleased'], '');
                            grand_total += resdata[i]['Gross'];
                            disbursements += resdata[i]['Disbursement'];
                        }
                        $("#loading").modal('hide');
                    } else {
                        tabledata[0] = new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                        $("#loading").modal('hide');
                    }
                    $("#loading").modal('hide');
                    table.loadData(tabledata);
                    grand_total = grand_total > 0 ? numberWithCommas(grand_total) : "0.00";
                    $("#total_ors").text("TOTAL : " + grand_total);
                    disbursements = disbursements > 0 ? numberWithCommas(disbursements) : "0.00";
                    $("#disbursement").text("DISBURSMENT : " + disbursements);
                });
            }

        })();
        

       // !function () { var e, t = [], a = document.getElementById("ors_table"), l = !0, o = ($("#ors_table").data("expense"), $("#ors_table").data("allotments")); function r() { var t = $("#ors_table").data("get"), a = 0, l = 0; $.get(t, function (t) { var o = []; if (t.length > 0) { for (var r = 0; r < t.length; r++) o[r] = new Array(t[r].ID, t[r].Row, t[r].Date, t[r].DB, t[r].PO, t[r].PR, t[r].PAYEE, t[r].Adress, t[r].Particulars, t[r].Row, t[r].FundSource, numberWithCommas(t[r].Gross), t[r].Created_By, t[r].DateReceived, t[r].TimeReceived, t[r].DateReleased, t[r].TimeReleased, ""), a += t[r].Gross, l += t[r].Disbursement; $("#loading").modal("hide") } else o[0] = new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null), $("#loading").modal("hide"); $("#loading").modal("hide"), e.loadData(o), a = a > 0 ? numberWithCommas(a) : "0.00", $("#total_ors").text("TOTAL : " + a), l = l > 0 ? numberWithCommas(l) : "0.00", $("#disbursement").text("DISBURSMENT : " + l) }) } e = new Handsontable(a, { startRows: 1, startCols: 17, rowHeaders: !0, colWidths: [1, 1, 140, 200, 200, 200, 300, 300, 700, 100, 200, 200, 200, 200, 200, 200, 200], colHeaders: !0, filters: !0, stretchH: "all", dropdownMenu: !0, contextMenu: { items: { make_bold: { name: "Print ORS", callback: function (e, t) { var a = this.getSelectedRange(), l = Math.min(a.from.row, a.to.row), o = this.getData()[l][0]; if (o) { var r = $("#ors_table").data("print_ors") + "/" + o; window.location.href = r } else Lobibox.alert("warning", { msg: "This row is not yet saved. Press Ctrl + S to save", title: "Print ORS" }) } }, "": { name: "UACS Amount Entry / Disbmt.", callback: function (e, t) { var a = this.getSelectedRange(), l = Math.min(a.from.row, a.to.row), o = this.getData()[l][0]; if (o) { var r = $("#ors_table").data("uacs_amount") + "/" + o; $("#ors_modal").modal({ backdrop: "static", keyboard: !1, show: !0 }), $(".ors_body").html(""), $(".loading").show(), $.get(r, function (e) { $(".ors_body").html(e), $(".loading").hide() }) } else Lobibox.alert("warning", { msg: "This row is not yet saved. Press Ctrl + S to save", title: "UACS Amount Entry / Disbmt" }) } }, row_below: {}, remove_row: {} } }, manualColumnMove: !0, fillHandle: { autoInsertRow: !1 }, colHeaders: ["<b>ID</b>", "<b>ROW#</b>", "<b>DATE</b/>", "<b>DV</b>", "<b>PO#</b>", "<b>PR#</b>", "<b>PAYEE</b>", "<b>ADDRESS</b>", "<b>PARTICULARS</b>", "<b>ORS NO</b>", "<b>FUND SOURCE</b>", "<b>GROSS</b>", "<b>CREATED BY</b>", "<b>Date Received</b>", "<b>Time Received</b>", "<b>Date Released</b>", "<b>Time Released</b>", ""], columns: [{}, {}, { type: "date", dateFormat: "MM/DD/YYYY", correctFormat: !0, defaultDate: Date.now() }, {}, {}, {}, {}, {}, {}, {}, { type: "dropdown", source: t }, {}, {}, { type: "date", dateFormat: "MM/DD/YYYY", correctFormat: !0, defaultDate: Date.now() }, { type: "time", timeFormat: "HH:mm:ss", correctFormat: !0 }, { type: "date", dateFormat: "MM/DD/YYYY", correctFormat: !0, defaultDate: Date.now() }, { type: "time", timeFormat: "HH:mm:ss", correctFormat: !0 }, {}], cells: function (e, t, a) { var l = {}; return 0 !== t && 1 !== t && 9 != t && 11 != t && 12 != t || (l.readOnly = !0), l }, beforeRemoveRow: function (e, t) { if (1 == confirm("Are you sure you want to delete this item")) { var a = this.getData()[e], l = $("#ors_table").data("delete"), o = { ID: a[0] }, n = { data: JSON.stringify(o) }; return $.post(l, n, function (e) { r() }), !0 } return !1 }, afterValidate: function (e, t, a, o, r) { e ? l = !0 : (l = !1, alert("there exists an invalid cell, disable save")) } }), $(document).ready(function () { $("#loading").modal("show"), r(), resize(), $.get(o, function (e) { if (e.length > 0) for (var a = 0; a < e.length; a++) t[a] = e[a].Code }) }), $(window).bind("keydown", function (t) { if (t.ctrlKey && 82 == t.keyCode) { var a = e.getData(); return a.push(new Array(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)), e.loadData(a), void t.preventDefault() } if (t.ctrlKey || t.metaKey) switch (String.fromCharCode(t.which).toLowerCase()) { case "s": if (t.preventDefault(), document.body.style.cursor = "wait", 1 == l) { for (var o = $("#ors_table").data("save"), n = [], s = e.getData(), i = !1, d = 0; d < s.length; d++) s[d][10] ? (n[d] = { ID: s[d][0], Row: d + 1, Date: s[d][2], DB: s[d][3], PO: s[d][4], PR: s[d][5], PAYEE: s[d][6], Adress: s[d][7], Particulars: s[d][8], FundSource: s[d][10], DateReceived: s[d][13], TimeReceived: s[d][14], DateReleased: s[d][15], TimeReleased: s[d][16] }, i = !0) : i = !1; if (i) { s = { data: JSON.stringify(n) }; $.post(o, s, function (e) { r(), document.body.style.cursor = "default" }) } else Lobibox.alert("warning", { msg: "There might be row that has no fund source selected. Please select a fund source for that row.", title: "Fund Source" }), document.body.style.cursor = "default" } else Lobibox.alert("warning", { msg: "Failed to save because theres an ivalid data inputed. See the color red in each rows to indentify errors.", title: "" }) } }), $("#ors_uacs_close").click(function () { r() }) }();
       
    </script>
}

@section footer{
    @Html.Partial("footer")
}

@section search_form{
    <form class="navbar-form navbar-left pull-right" role="search">
        <div class="form-group">
            <input type="text" name="q" class="form-control" placeholder="Search" value="@Session["query"].ToString()">
        </div>
        <button type="submit" class="btn btn-success"><span class="glyphicon glyphicon-search"></span> Search</button>
    </form>
}
